---
version: 2.1

orbs:
  op: twdps/onepassword@1.0.0
  cosign: twdps/cosign@0.1.1
  win: circleci/windows@4.1.1

# =================================== global pipeline parameters

globals:
  - &context empc-lab

on-push-main: &on-push-main
  branches:
    only: /main/
  tags:
    ignore: /.*/

on-tag-release: &on-tag-release
  branches:
    ignore: /.*/
  tags:
    only:
      - /^([0-9]+(\.[0-9]+)+)-rc.[0-9]+$/
      - /^((([0-9]+)\.([0-9]+)\.([0-9]+))?)$/

# could use our own go builder that has all the additional tools already baked in
executors:
  go-builder:
    docker:
      - image: cimg/go:1.19.4

jobs:

  static analysis and functional tests:
    executor: go-builder
    steps:
      - checkout
      - setup_remote_docker
      - op/install-op:
          os: Ubuntu
      - op/env
      - run:
          name: static code analysis
          command: |
            go install honnef.co/go/tools/cmd/staticcheck@v0.4.5
            staticcheck ./...
      - run:
          name: lint
          command: |
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
            golangci-lint run ./...
      - run:
          name: functional tests
          command: |
            curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | sudo bash
            go test -v ./cmd

  publish release version:
    executor: go-builder
    steps:
      - checkout
      - setup_remote_docker
      - op/install-op:
          os: Ubuntu
      - op/env
      - cosign/install:
          cosign-version: v1.8.0
      - run:
          name: fetch keys for signing
          command: |
            echo "op://empc-lab/svc-cosign-private-key/notesPlain" > cosign.key.env
            echo "op://empc-lab/svc-cosign-public-key/notesPlain" > cosign.pub.env
            op inject -i cosign.key.env -o cosign.key
            op inject -i cosign.pub.env -o cosign.pub
      - run:
          name: Use goreleaser to build and publish executables to github packages
          command: |
            curl -sL https://git.io/goreleaser | bash
            mkdir release-assets && cp dist/*.tar.* release-assets && cp dist/*.zip release-assets
      - run:
          name: validate signature
          command: cosign verify-blob --key cosign.pub --signature release-assets/circlepipe_Linux_amd64.tar.gz.sig release-assets/circlepipe_Linux_amd64.tar.gz
      - persist_to_workspace:
          root: ~/
          paths:
            - project/release-assets   # used by the smoke-tests

  smoke-test linux arm build:
    machine:
      image: ubuntu-2204:2023.07.1
    resource_class: arm.medium
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: check self-reported version on arm64 linux build
          command: |
            tar -xvzf release-assets/circlepipe_Linux_arm64.tar.gz
            ./circlepipe version | grep ${CIRCLE_TAG}

  smoke-test macos build:
    macos:
      xcode: 14.3.1
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: check self-reported version on macos build
          command: |
            tar -xvzf release-assets/circlepipe_Darwin_amd64.tar.gz
            ./circlepipe version | grep ${CIRCLE_TAG}

  smoke-test windows build:
    executor:
      name: win/default
      shell: bash.exe
    steps:
      - checkout
      - attach_workspace:
            at: ~/
      - run:
          name: check self-reported version on windows build
          command: |
            unzip -u release-assets/circlepipe_Windows_amd64.zip
            ./circlepipe version | grep ${CIRCLE_TAG}

workflows:
  version: 2

  dev build:
    jobs:
      - static analysis and functional tests:
          context: *context
          filters: *on-push-main

  release:
    jobs:
      - publish release version:
          context: *context
          filters: *on-tag-release

      - smoke-test linux arm build:
          requires:
            - publish release version
          filters: *on-tag-release
      - smoke-test macos build:
          requires:
            - publish release version
          filters: *on-tag-release
      - smoke-test windows build:
          requires:
            - publish release version
          filters: *on-tag-release
